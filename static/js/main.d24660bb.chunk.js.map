{"version":3,"sources":["images/mark.svg","images/wm.svg","images/react-spring-logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","aLogo","useSpring","config","molasses","from","opacity","transform","to","aBg","scale","aTitle","delay","xy","mass","tension","friction","set","calc","x","y","window","innerWidth","innerHeight","ref","useRef","offset","setOffset","handleScroll","posY","current","getBoundingClientRect","top","pageYOffset","useEffect","addEventListener","removeEventListener","marks","mark","useState","unMark","setUnMark","useTrail","length","gentle","height","reverse","hover","setHover","stdButton","wobbly","div","className","style","onMouseMove","clientX","clientY","h1","img","src","onMouseOver","onMouseOut","wm","onClick","reactSpringLogo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d24660bb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mark.8ece28f3.svg\";","export default __webpack_public_path__ + \"static/media/wm.61f537d4.svg\";","export default __webpack_public_path__ + \"static/media/react-spring-logo.0e8ba6f4.svg\";","import React, { useState, useEffect, useRef } from 'react';\nimport { useSpring, useTrail, a, config } from 'react-spring';\nimport mark from './images/mark.svg';\nimport wm from './images/wm.svg'\nimport reactSpringLogo from './images/react-spring-logo.svg'\nimport './App.css';\n\nfunction App() {\n\n  // Global Bits: Logo, Bg & Title Animation ////////////////////////////////////////////////////////////\n\n  const aLogo = useSpring({\n    config: { ...config.molasses },\n    from: { opacity: 0, transform: 'translateY(100px)' },\n    to: { opacity: 1, transform: 'translateY(0px)' },\n  })\n\n  const aBg = useSpring({\n    config: { ...config.molasses },\n    from: { scale: 1.3 },\n    to: { scale: 1 },\n  })\n\n  const aTitle = useSpring({\n    config: { ...config.molasses },\n    delay: 150,\n    from: { opacity: 0, transform: 'translateY(-100px)' },\n    to: { opacity: 1, transform: 'translateY(0px)' },\n  })\n\n  //////////////////////////////////////////////////////////////////////////////\n  // Interpolation /////////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////\n\n  // Animation props ///////////////////////////////////////////////////////////\n\n  const [properties, set] = useSpring(() => ({ xy: [0, 0], config: { mass: 10, tension: 550, friction: 140 } }))\n\n  const calc = (x, y) => [x - window.innerWidth / 2, y - window.innerHeight / 2]\n\n  // Title\n  const transTitle = (x, y) => `translate3d(${x / 40}px,${y / 40}px,0)`\n\n  const trans1 = (x, y) => `translate3d(${x / 6}px,${y / 6}px,0)`\n  const trans2 = (x, y) => `translate3d(${x / 3}px,${y / 3}px,0)`\n  const trans3 = (x, y) => `translate3d(${x / 5}px,${y / 5}px,0)`\n  const trans4 = (x, y) => `translate3d(${x / 9}px,${y / 9}px,0)`\n  const trans5 = (x, y) => `translate3d(${x / 2}px,${y / 2}px,0)`\n\n  // Animation on scroll //////////////////////////////////////////////////////\n\n  // Handles scroll y-value for use for animation sequencing\n  const ref = useRef();\n  const [{ offset }, setOffset] = useSpring(() => ({ offset: 0 }));\n\n  const handleScroll = () => {\n    const posY = ref.current.getBoundingClientRect().top;\n    const offset = (window.pageYOffset - posY) / (window.innerHeight / 1);\n    setOffset({ offset });\n  };\n\n  // Finding the current location on the page\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  });\n\n  //////////////////////////////////////////////////////////////////////////////\n  // Trail animation ///////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////\n\n  const marks = [\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark,\n    mark\n  ];\n\n  const [unMark, setUnMark] = useState(false);\n\n  const trail = useTrail(marks.length, {\n    config: { ...config.gentle},\n    delay: 1000,\n    from: { opacity: 0, x: -20, y: 80, height: 200 },\n    to: { opacity: 1, x: 0, y: 0, height: 200 },\n    reverse: unMark\n  });\n\n  //////////////////////////////////////////////////////////////////////////////\n  // Standard Button ///////////////////////////////////////////////////////////\n  //////////////////////////////////////////////////////////////////////////////\n\n  const [hover, setHover] = useState(false);\n  const stdButton = useSpring({\n    config: { ...config.wobbly },\n    from: { scale: 0.2, opacity: 0, transform: 'rotate(-80deg) translateY(100px)' },\n    to: { scale: hover ? 1.8 : 1, opacity: hover ? 1 : 0.7, transform: hover ? 'rotate(10deg) translateY(0px)' : 'rotate(0deg) translateY(0px)' },\n  })\n\n  return (\n    <a.div className=\"main-container\" style={{ scale: aBg.scale }} ref={ref} onMouseMove={({ clientX: x, clientY: y }) => set({ xy: calc(x, y) })}>\n\n      <a.h1 style={{ opacity: aTitle.opacity }}>Physics-based Animation<br />w/ React-Spring</a.h1>\n\n      {/*Standard button*/}\n\n      <section className=\"one\">\n        <a.img\n          src={mark}\n          onMouseOver={() => setHover(!hover)}\n          onMouseOut={() => setHover(!hover)}\n          style={{\n            scale: stdButton.scale,\n            opacity: stdButton.opacity,\n            transform: stdButton.transform\n          }} />\n      </section>\n\n      {/* Trail */}\n\n      {/*<section className=\"two\">\n        {trail.map(({ x, y, height, ...rest }, index) => (\n          <a.div\n            key={marks[index]}\n            style={{\n              ...rest,\n              transform: y.interpolate(y => `translate3d(0,${y}px,0)`),\n            }}\n          >\n            <a.img src={marks[index]} onClick={() => setUnMark(!unMark)} style={{ height }}/>\n          </a.div>\n        ))}\n      </section>*/}\n\n      {/* Interpolation */}\n\n      {/*<section className=\"three\">\n        <a.img className=\"three-1\" src={mark} style={{ transform: properties.xy.interpolate(trans1) }} />\n        <a.img className=\"three-2\" src={mark} style={{ transform: properties.xy.interpolate(trans2) }} />\n        <a.img className=\"three-3\" src={mark} style={{ transform: properties.xy.interpolate(trans3) }} />\n        <a.img className=\"three-4\" src={mark} style={{ transform: properties.xy.interpolate(trans4) }} />\n        <a.img className=\"three-5\" src={mark} style={{ transform: properties.xy.interpolate(trans5) }} />\n      </section>*/}\n\n      <a.img className=\"wm\" src={wm} onClick={() => setUnMark(!unMark)} style={{ opacity: aLogo.opacity, transform: aLogo.transform }} />\n      <a.img className=\"react-spring\" src={reactSpringLogo} onClick={() => setUnMark(!unMark)} style={{ opacity: aLogo.opacity, transform: aLogo.transform }} />\n\n    </a.div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}